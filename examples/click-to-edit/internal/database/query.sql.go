// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package database

import (
	"context"
)

const contactWithID = `-- name: ContactWithID :one
SELECT id, first_name, last_name, email FROM contacts WHERE id = ?
`

func (q *Queries) ContactWithID(ctx context.Context, id int64) (Contact, error) {
	row := q.db.QueryRowContext(ctx, contactWithID, id)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}

const listContacts = `-- name: ListContacts :many
SELECT id, first_name, last_name, email FROM contacts ORDER BY id
`

func (q *Queries) ListContacts(ctx context.Context) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, listContacts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContact = `-- name: UpdateContact :exec
UPDATE contacts SET first_name = ?, last_name = ?, email = ? WHERE id = ?
`

type UpdateContactParams struct {
	FirstName string
	LastName  string
	Email     string
	ID        int64
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) error {
	_, err := q.db.ExecContext(ctx, updateContact,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.ID,
	)
	return err
}
