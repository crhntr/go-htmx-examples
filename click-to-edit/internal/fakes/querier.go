// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/crhntr/go-htmx-examples/click-to-edit/internal/database"
)

type Querier struct {
	ContactWithIDStub        func(context.Context, int64) (database.Contact, error)
	contactWithIDMutex       sync.RWMutex
	contactWithIDArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	contactWithIDReturns struct {
		result1 database.Contact
		result2 error
	}
	contactWithIDReturnsOnCall map[int]struct {
		result1 database.Contact
		result2 error
	}
	ListContactsStub        func(context.Context) ([]database.Contact, error)
	listContactsMutex       sync.RWMutex
	listContactsArgsForCall []struct {
		arg1 context.Context
	}
	listContactsReturns struct {
		result1 []database.Contact
		result2 error
	}
	listContactsReturnsOnCall map[int]struct {
		result1 []database.Contact
		result2 error
	}
	UpdateContactStub        func(context.Context, database.UpdateContactParams) error
	updateContactMutex       sync.RWMutex
	updateContactArgsForCall []struct {
		arg1 context.Context
		arg2 database.UpdateContactParams
	}
	updateContactReturns struct {
		result1 error
	}
	updateContactReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Querier) ContactWithID(arg1 context.Context, arg2 int64) (database.Contact, error) {
	fake.contactWithIDMutex.Lock()
	ret, specificReturn := fake.contactWithIDReturnsOnCall[len(fake.contactWithIDArgsForCall)]
	fake.contactWithIDArgsForCall = append(fake.contactWithIDArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.ContactWithIDStub
	fakeReturns := fake.contactWithIDReturns
	fake.recordInvocation("ContactWithID", []interface{}{arg1, arg2})
	fake.contactWithIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Querier) ContactWithIDCallCount() int {
	fake.contactWithIDMutex.RLock()
	defer fake.contactWithIDMutex.RUnlock()
	return len(fake.contactWithIDArgsForCall)
}

func (fake *Querier) ContactWithIDCalls(stub func(context.Context, int64) (database.Contact, error)) {
	fake.contactWithIDMutex.Lock()
	defer fake.contactWithIDMutex.Unlock()
	fake.ContactWithIDStub = stub
}

func (fake *Querier) ContactWithIDArgsForCall(i int) (context.Context, int64) {
	fake.contactWithIDMutex.RLock()
	defer fake.contactWithIDMutex.RUnlock()
	argsForCall := fake.contactWithIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Querier) ContactWithIDReturns(result1 database.Contact, result2 error) {
	fake.contactWithIDMutex.Lock()
	defer fake.contactWithIDMutex.Unlock()
	fake.ContactWithIDStub = nil
	fake.contactWithIDReturns = struct {
		result1 database.Contact
		result2 error
	}{result1, result2}
}

func (fake *Querier) ContactWithIDReturnsOnCall(i int, result1 database.Contact, result2 error) {
	fake.contactWithIDMutex.Lock()
	defer fake.contactWithIDMutex.Unlock()
	fake.ContactWithIDStub = nil
	if fake.contactWithIDReturnsOnCall == nil {
		fake.contactWithIDReturnsOnCall = make(map[int]struct {
			result1 database.Contact
			result2 error
		})
	}
	fake.contactWithIDReturnsOnCall[i] = struct {
		result1 database.Contact
		result2 error
	}{result1, result2}
}

func (fake *Querier) ListContacts(arg1 context.Context) ([]database.Contact, error) {
	fake.listContactsMutex.Lock()
	ret, specificReturn := fake.listContactsReturnsOnCall[len(fake.listContactsArgsForCall)]
	fake.listContactsArgsForCall = append(fake.listContactsArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ListContactsStub
	fakeReturns := fake.listContactsReturns
	fake.recordInvocation("ListContacts", []interface{}{arg1})
	fake.listContactsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Querier) ListContactsCallCount() int {
	fake.listContactsMutex.RLock()
	defer fake.listContactsMutex.RUnlock()
	return len(fake.listContactsArgsForCall)
}

func (fake *Querier) ListContactsCalls(stub func(context.Context) ([]database.Contact, error)) {
	fake.listContactsMutex.Lock()
	defer fake.listContactsMutex.Unlock()
	fake.ListContactsStub = stub
}

func (fake *Querier) ListContactsArgsForCall(i int) context.Context {
	fake.listContactsMutex.RLock()
	defer fake.listContactsMutex.RUnlock()
	argsForCall := fake.listContactsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Querier) ListContactsReturns(result1 []database.Contact, result2 error) {
	fake.listContactsMutex.Lock()
	defer fake.listContactsMutex.Unlock()
	fake.ListContactsStub = nil
	fake.listContactsReturns = struct {
		result1 []database.Contact
		result2 error
	}{result1, result2}
}

func (fake *Querier) ListContactsReturnsOnCall(i int, result1 []database.Contact, result2 error) {
	fake.listContactsMutex.Lock()
	defer fake.listContactsMutex.Unlock()
	fake.ListContactsStub = nil
	if fake.listContactsReturnsOnCall == nil {
		fake.listContactsReturnsOnCall = make(map[int]struct {
			result1 []database.Contact
			result2 error
		})
	}
	fake.listContactsReturnsOnCall[i] = struct {
		result1 []database.Contact
		result2 error
	}{result1, result2}
}

func (fake *Querier) UpdateContact(arg1 context.Context, arg2 database.UpdateContactParams) error {
	fake.updateContactMutex.Lock()
	ret, specificReturn := fake.updateContactReturnsOnCall[len(fake.updateContactArgsForCall)]
	fake.updateContactArgsForCall = append(fake.updateContactArgsForCall, struct {
		arg1 context.Context
		arg2 database.UpdateContactParams
	}{arg1, arg2})
	stub := fake.UpdateContactStub
	fakeReturns := fake.updateContactReturns
	fake.recordInvocation("UpdateContact", []interface{}{arg1, arg2})
	fake.updateContactMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Querier) UpdateContactCallCount() int {
	fake.updateContactMutex.RLock()
	defer fake.updateContactMutex.RUnlock()
	return len(fake.updateContactArgsForCall)
}

func (fake *Querier) UpdateContactCalls(stub func(context.Context, database.UpdateContactParams) error) {
	fake.updateContactMutex.Lock()
	defer fake.updateContactMutex.Unlock()
	fake.UpdateContactStub = stub
}

func (fake *Querier) UpdateContactArgsForCall(i int) (context.Context, database.UpdateContactParams) {
	fake.updateContactMutex.RLock()
	defer fake.updateContactMutex.RUnlock()
	argsForCall := fake.updateContactArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Querier) UpdateContactReturns(result1 error) {
	fake.updateContactMutex.Lock()
	defer fake.updateContactMutex.Unlock()
	fake.UpdateContactStub = nil
	fake.updateContactReturns = struct {
		result1 error
	}{result1}
}

func (fake *Querier) UpdateContactReturnsOnCall(i int, result1 error) {
	fake.updateContactMutex.Lock()
	defer fake.updateContactMutex.Unlock()
	fake.UpdateContactStub = nil
	if fake.updateContactReturnsOnCall == nil {
		fake.updateContactReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateContactReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Querier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.contactWithIDMutex.RLock()
	defer fake.contactWithIDMutex.RUnlock()
	fake.listContactsMutex.RLock()
	defer fake.listContactsMutex.RUnlock()
	fake.updateContactMutex.RLock()
	defer fake.updateContactMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Querier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ database.Querier = new(Querier)
